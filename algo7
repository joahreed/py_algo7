/* 
  Given a string,
  return a new string with the duplicates excluded

  Bonus: Keep only the last instance of each character.
*/

const str1 = "abcABC";
const expected1 = "abcABC";

const str2 = "helloo";
const expected2 = "helo";

const str3 = "";
const expected3 = "";

const str4 = "aa";
const expected4 = "a";

const str5 = "aabcb";
const expected5 = "abc";
const expected5_bonus = "acb";


/**
 * De-dupes the given string.
 * - Time: O(?).
 * - Space: O(?).
 * @param {string} str A string that may contain duplicates.
 * @returns {string} The given string with any duplicate characters removed.
 */
function stringDedupe(str) {}

/*****************************************************************************//* 
  Given a string containing space separated words
  Reverse each word in the string.

  If you need to, use .split to start, then try to do it without.
*/

const str1 = "hello";
const expected1 = "olleh";

const str2 = "hello world";
const expected2 = "olleh dlrow";

const str3 = "abc def ghi";
const expected3 = "cba fed ihg";

/**
 * Reverses the letters in each words in the given space separated
 * string of words. Does NOT reverse the order of the words themselves.
 * - Time: O(?).
 * - Space: O(?).
 * @param {string} str Contains space separated words.
 * @returns {string} The given string with each word's letters reversed.
 */
function reverseWords(str) {}

/*****************************************************************************/
/* 
    Given a string,
    return a new string with the duplicates excluded

    Bonus: Keep only the last instance of each character.
*/

const str1 = "abcABC";
const expected1 = "abcABC";

const str2 = "helloo";
const expected2 = "helo";

const str3 = "";
const expected3 = "";

const str4 = "aa";
const expected4 = "a";

const str5 = "aabcb";
const expected5 = "abc";
const expected5_bonus = "acb";


/**
 * De-dupes the given string.
 * - Time: O(?).
 * - Space: O(?).
 * @param {string} str A string that may contain duplicates.
 * @returns {string} The given string with any duplicate characters removed.
 */
function stringDedupe(str) {
    var result = ""
    for (var i = 0; i< str.length; i++) {
        var isRepeated = false;
        for (var j = i + 1; j < str.length; j++) {
            if (str[j] == str[i]) {
                isRepeated = true;
            }
        }
        if (isRepeated == true) {
            continue;
        } else {
            result += str[i];
        }
    }
    return result;
}

console.log(stringDedupe(str1));
console.log(stringDedupe(str2));
console.log(stringDedupe(str3));
console.log(stringDedupe(str4));
console.log(stringDedupe(str5));



/*****************************************************************************//**
 * De-dupes the given string.
 * - Time: O(n).
 * - Space: O(?).
 * @param {string} str A string that may contain duplicates.
 * @returns {string} The given string with any duplicate characters removed.
 */
function stringDedupe(str = "") {
    let distinctStr = "";
    const seen = {};
  
    // loop backwards to include last occurrence
    for (let i = str.length - 1; i >= 0; --i) {
      if (!seen[str[i]]) {
        distinctStr = str[i] + distinctStr;
        seen[str[i]] = true;
      }
    }
    return distinctStr;
  }
